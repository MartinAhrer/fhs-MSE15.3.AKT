:source-highlighter: pygments
:ubuntu-version: 14.04 (trusty)
:docker-compose-version: 1.4.2

= Übungsinstruktionen

Alle Übungsbeispiele basieren auf der Annahme dass diese mit einer 'native' Docker Installation auf einer Linux Box durchgeführt werden. Vorzugsweise mittels des zur Verfügung gestellten Vmware Image `mse-akt`.

== Vmware Image mse-akt

Es wird eine virtuelle Maschine `mse-akt` mit Ubuntu 14.04.x LTS zur Verfügung gestellt. Mit dieser können alle Übungen durchgeführt werden. Derzeit liegt diese nur als Server Installation vor (kein grafisches UI verfügbar).

=== Installation

. Import des Vmware Image
. Netzwerk konfigurieren (NAT oder Bridged???)
. Starte Vmware Image `mse-akt`.

=== SSH

Um mit einem externen SSH Client eine Verbindung zu dieser herzustellen, kann optional das OpenSSH Paket installiert werden.

[source, shell]
----
sudo apt-get install openssh-client
sudo apt-get install openssh-server
----

=== Docker Installation

Ziel dieser Übung ist es auf einer Ubuntu Instanz eine funktionsfähige Docker Installation einzurichten.

[source, shell]
----
sudo apt-get update
sudo apt-get install curl
curl -sSL https://get.docker.com/ | sh
----

Detail Instruktionen: https://docs.docker.com/installation/ubuntulinux/[Docker auf Ubuntu installieren].

Um die Docker Installation zu testen führen wir folgendes Kommando aus

[source, shell]
----
docker run -i -t --rm ubuntu:14.04 /bin/bash
----

== docker-machine

Wir können mit `docker-machine` direkt arbeiten wenn bereits ein Arbeitsgerät mit Unix zur Verfügung steht (z.B. Linux oder Mac OSX).
Mit `docker-machine` ist es uns möglich auf diesem Gerät sehr einfach einen Docker Host einzurichten (das ist eine Linux Box mit einem vorkonfigurierten Docker Daemon).

Docker ist auf diesen https://docs.docker.com/installation[Plattformen]  unterstützt. Vorzugsweise verwenden wir Mac OSX oder Ubuntu mit LTS (z.B. 14.04.LTS).

CAUTION: Vor der Verwendung von `docker-machine` auf Windows wird abgeraten.

=== docker-machine Installation

Siehe https://docs.docker.com/machine/install-machine/.

[source,shell]
.docker-machine Installation für 64 bit Intel/AMD Linux
----
curl -L https://github.com/docker/machine/releases/download/v0.4.0/docker-machine_-`uname -s`-`uname -m` > /usr/local/bin/docker-machine
chmod +x /usr/local/bin/docker-machine
docker-machine -v
----

=== Docker Host Provisioning

Folgende Instruktionen basieren auf der Annahme dass wir mit Virtual Box 4.x zur Virtualisierung des Docker Host arbeiten.

[source, shell]
.Docker Host erzeugen
----
docker-machine create --driver virtualbox mse-akt
----

.Docker Host starten
[source, shell]
----
docker-machine start mse-akt
eval "$(docker-machine env mse-akt)"
----

== Die Docker Installation überprüfen

Bei allen Übungsbeispielen mit Docker verwenden wir ausschließlich Ubuntu {ubuntu-version}. D.h. die Docker Container starten eine Ubuntu {ubuntu-version} Instanz! Damit ist eine zügige Übungsabwicklung möglich ohne dass permanent neue Ubuntu Versionen über das Netzwerk geladen werden müssen.

[source,shell]
.Überprüfung der Docker Installation:
----
docker run -i -t --rm ubuntu:14.04 /bin/bash
----

IMPORTANT: Auf einem Linux Host müssen standardmäßig alle Docker Kommandos mit `sudo`(Super User Rechten) ausgeführt werden. Aus Gründen der Übersichtlichkeit und um die Beispiele kompakter zu halten, wird der `sudo` Prefix nachfolgend nicht dargestellt. `sudo` ist zudem auch nicht notwendig wenn z.B. auf Mac OSX mit boot2docker/docker-machine gearbeitet wird. Optional kann docker auch derart konfiguriert werden dass `sudo` nicht notwendig ist. Darauf wird aber aus Sicherheitsgründen im allgemeinen abgeraten.

Hilfe zu den Docker Kommandos finden Sie auf https://docs.docker.com/reference/commandline/cli/.

== Union File System

Ziel dieser Übung ist es mehrere Verzeichnisse mittels AUFS zu überlagern, sodass die Inhalte derselben in einem mittels AUFS gemounteten Verzeichnis sichtbar werden.

Wir installieren den File System Support für AUFS. Dieses wird nur für Übungszwecke benötigt, nicht durch Docker selbst.

[source, shell]
----
sudo apt-get install aufs-tools
----

Erstellen Sie 3 Verzeichnisse

* $HOME/aufs/sub1
* $HOME/aufs/sub2
* $HOME/aufs/root

Erstellen Sie in allen Verzeichnissen ein Datei (Z.b. `touch file.txt` )
Und verwenden Sie das installierte *aufs* Dateisystem mit dem `mnt` Kommando um die Verzeichnisse `sub1`und `sub2` als Unterverzeichnisse von `root` einzuhängen.

== Docker kennenlernen

Ziel dieser Übung ist es, einen Docker Container mit einer Ubuntu Shell zu starten. D.h. Sie müssen danach in der Lage sein innerhalb des Containers Shell Befehle abzusetzen. Verwenden Sie das Kommando `docker run`.

Beenden Sie den Container und erforschen Sie welche Docker Komponenten obiger Befehl erzeugt hat. Experimentieren Sie mit den Kommandos `docker images` und `docker ps`. Versuchen Sie auch die Erklärungen zu den verwendeten Kommandos mit der Option `--help` abzufragen.

Versuchen Sie Querverbindungen zwischen den Informationen die von `docker images -a` sowie `docker history ubuntu` ausgegeben werden festzustellen.

Versuchen Sie herauszufinden, in welcher Form ein Container nach Beendigung des Container Prozesses bestehen bleibt. Welchen Docker Befehl können Sie dafür verwenden?


== Images und Container

=== Image aus einem Container erstellen

Ziel dieser Übung ist es, mittels `docker commit` Änderungen die in einem laufenden Container durchgeführt wurden permanent in einem neuen Image zu persistieren. Erstellen Sie dazu z.b. im Container einfach neue Verzeichnisse und Dateien.

=== Oracle Java 8 Container

Ziel dieser Übung ist es, mittels `docker build ...`, ein Docker Image mit Oracle Java 8 zu erstellen. Dieses Image wird die Grundlage bilden für weitere Container die eine JVM benötigen.

[source, shell]
.Ubuntu Oracle Java 8 Installations Script
----
apt-get update
apt-get -y install python-software-properties software-properties-common
echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | debconf-set-selections
add-apt-repository -y ppa:webupd8team/java
apt-get update
apt-get install -y oracle-java8-installer
apt-get install oracle-java8-set-default
rm -rf /var/lib/apt/lists/*
rm -rf /var/cache/oracle-jdk8-installer
----

Testen Sie dieses Image und versuchen Sie damit einen Container zu starten und in diesem den Java Compiler und die Java VM zu starten. Sie können dazu unten vorgegebenen Quellcode verwenden.

[source,java]
.HelloWorld.java
----
class HelloWorld {
  public static void main(String[] args) {
    System.out.println ("Hello World");
  }
}
----

Führen Sie das Kommando zum Bauen des Image mehrfach aus, beobachten Sie die Konsolenausgabe. Was hat sich verändert? Weiters versuchen Sie herauszufinden, wieviele Layer erstellt wurden.

Abschliessend modifizieren Sie die Build Instruktionen sodass möglichst wenige Layer produziert werden.

TIP: Dieses Image benötigen wir für spätere Übungen.

=== Java Web Applikation Container

Bei dieser Übung erstellen Sie mittels `docker build ...` ein Docker Image das eine Java Web Applikation in einer Oracle Java 8 JVM ausführt. Die Applikation steht auf einem  https://snap-ci.com/buildartifacts/blue/40055/defaultPipeline/4/Commit/1/rest/starbucks/target/spring-data-rest-starbucks-1.0.0.BUILD-SNAPSHOT.jar?archived=true[Snap-CI] Server zum Download zur Verfügung.

Die Web Anwendung benutzt zur Persistierung Ihrer Daten eine Mongo Datenbank die ebenfalls als eigenständiger Docker Container auszuführen ist. Die Datenbankverbindungsparameter können als Systemproperties an die JVM der Anwendung übergeben werden.

[source,shell]
.Startkommando der Web Applikation
----
java -jar -Dspring.data.mongodb.host=... -Dspring.data.mongodb.port=... spring-data-rest-starbucks.jar <1>
----
<1> Diese Startupparameter sind in der Spring Boot http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-mongodb[Referenz] beschrieben

In dem Applikations JAR File ist ein Tomcat Web Container verpackt der seine HTTP Dienste am Port 8080 zur Verfügung stellt.

TIP: Dieses Image benötigen wir für eine spätere Übung.

==== Zusatzaufgaben

===== Port Konfiguration

Experimentieren Sie mit den passenden `docker` Kommandooptionen um einen Mongo Container zu starten der `EXPOSED` Ports

* explizit einem definierten Port zuordnet,
* automatisch Ports zuordnet.

Mit diesen Erkenntnissen rekonfigurieren wir den zuvor erstellten Web Applikation Container. Es wurde  bereits angeführt dass Tomcat seine HTTP Dienste per Port 8080 zur Verfügung stellt. Für den Endanwender soll nun die Anwendung am Port 80 erreichbar sein.

===== Container Inspektion

Wir versuchen mit Hilfe des Kommandos `docker inspect` die Konfiguration des Containers abzufragen. Weiters versuchen wir das Kommando so zu ändern dass wir nur die Netzwerkkonfiguration bzw. nur die IP Adresse des Containers erhalten.

=== Daten Container für einen Mongo Container erstellen

...

== Multi Container Applikationen

Die Erstellung sowie der Betrieb von Docker Containern für Anwendungen die aus vielen Subsystemen bestehen (Z.b. Web Server + Datenbankserver) ist aufwändig und komplex. Daher existiert mit *docker compose* ein Tool das erlaubt die Abhängigkeiten zwischen Containern so wie deren Ausführungskonfiguration zu beschreiben.

=== Docker Compose Installation

Eine allgemeine https://docs.docker.com/compose/install/[Installationsanleitung] zu *docker-compose* finden Sie im Web.

[source,shell]
----
curl -L https://github.com/docker/compose/releases/download/VERSION_NUM/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose <1>
chmod +x /usr/local/bin/docker-compose
----
<1> Ersetzen Sie `VERSION_NUM` durch {docker-compose-version}. Entfernen Sie vor der Befehlsausführung den Hinweismarker (n).

Für eine verbesserte Shell Unterstützung können wir folgendes ausführen

[source,shell]
.bash auto-complete support
----
curl -L https://raw.githubusercontent.com/docker/compose/$(docker-compose --version | awk 'NR==1{print $NF}')/contrib/completion/bash/docker-compose > /etc/bash_completion.d/docker-compose
----

=== Docker Compose Datei

Erstellen sie eine docker-compose Beschreibungsdatei die für die bereits erstellen Images und Container der Java Web Applikation die `build` Schritte sowie die Konfiguration zur Ausführung der Container festschreibt.

Damit soll es möglich sein, den Mongo und den Web Container einfach per `docker-compose up` zu starten.

=== Docker Host Provisioning

docker-machine
