:source-highlighter: pygments
:ubuntu-version: 14.04 (trusty)
:docker-compose-version: 1.5.2

= Übungsinstruktionen

All instructions for lab exercises are based on a 'native' Docker installation. This is provided through a Vmware Image `mse-akt`.

== Setup

=== Vmware Image mse-akt

A virtual machine `mse-akt` based on Ubuntu 14.04.x LTS is provided. All lab exercises can be peformed using thise machine. As of now we only have a pure server setup available (sorry no desktop, no GUI).

.Setup the provided image

. Import Vmware image
. Configure network (Bridged)
. Start Vmware image `mse-akt`.

.Connecting to the machine
Using a SSH client we can try to connect to the Ubuntu machine.

[source, shell]
--
ssh mse-akt@mse-akt <1>
--
<1> This command will ask to enter the password for the user `mse-akt`.

.Setup a student user account

Follow the instructions included in the appendix!

=== docker-machine

IMPORTANT: The docker-machine based setup is only documented for show-case purposes and not supported during lab sessions.

We can avoid working with an extra virtualization solution when a workstation based on native Linux (or Mac OSX) is available.
Using `docker-machine` we can quickly provision a docker host (this is a Linux Box with a pre-configured Docker daemon).

Docker supported for the following platforms: https://docs.docker.com/installation.
Preferrably we use Mac OSX or Ubuntu (e.g. 14.04.LTS).

.Create a Docker host
[source, shell]
--
docker-machine create --driver virtualbox mse-akt <1>
--
<1> This requires VirtualBox 4.x to be installed.

.Start a Docker host
[source, shell]
----
docker-machine start mse-akt
eval "$(docker-machine env mse-akt)"
----

=== Die Docker Installation überprüfen

Bei allen Übungsbeispielen mit Docker verwenden wir ausschließlich Ubuntu {ubuntu-version}. D.h. die Docker Container starten eine Ubuntu {ubuntu-version} Instanz! Damit ist eine zügige Übungsabwicklung möglich ohne dass permanent neue Ubuntu Versionen über das Netzwerk geladen werden müssen.

[source,shell]
.Überprüfung der Docker Installation:
----
docker run -i -t --rm ubuntu:14.04 /bin/bash
----

IMPORTANT: Auf einem Linux Host müssen standardmäßig alle Docker Kommandos mit `sudo` (Super User Rechten) ausgeführt werden. Aus Gründen der Übersichtlichkeit und um die Beispiele kompakter zu halten, wird der `sudo` Prefix nachfolgend nicht dargestellt. `sudo` ist zudem auch nicht notwendig wenn z.B. auf Mac OSX mit boot2docker/docker-machine gearbeitet wird. Optional kann docker auch derart konfiguriert werden dass `sudo` nicht notwendig ist. Darauf wird aber aus Sicherheitsgründen im allgemeinen abgeraten. Um die Übungsabwicklung einfacher zu gestalten sind alle Benutzerkonten so konfiguriert dass auf `sudo` verzichtet werden kann.

Hilfe zu den Docker Kommandos finden Sie auf https://docs.docker.com/reference/commandline/cli/.

== Union File System

Ziel dieser Übung ist es, mehrere Verzeichnisse mittels AUFS zu überlagern, sodass die Inhalte derselben in einem mittels AUFS gemounteten Verzeichnis sichtbar werden.

Wir installieren den File System Support für AUFS. Dieses File System wird nur für Übungszwecke benötigt, nicht durch Docker selbst.

[source, shell]
----
sudo apt-get install aufs-tools
----

Erstellen Sie 3 Verzeichnisse

* $HOME/aufs/sub1
* $HOME/aufs/sub2
* $HOME/aufs/root

Erstellen Sie in allen Verzeichnissen ein Datei (Z.b. `touch file.txt` )
Und verwenden Sie das installierte *aufs* Dateisystem mit dem `mnt` Kommando um die Verzeichnisse `sub1`und `sub2` als Unterverzeichnisse von `root` einzuhängen.

== Docker kennenlernen

Ziel dieser Übung ist es, einen Docker Container mit einer Ubuntu `bash` Shell zu starten und zu untersuchen welche Docker Komponenten erzeugt wurden und wie diese miteinander verknüpft sind.

.Aufgabe 1:
Die erste Aufgabe ist es, einen Container mit dem Kommando `docker run` (mit den richtigen Argumenten) zu starten sodass dieser Container interaktiv Befehle einer bash (`/bin/bash`) Shell entgegen nimmt.
Beenden Sie danach den Container und erforschen Sie welche Docker Komponenten mit der ersten Aufgabe erzeugt wurden. Experimentieren Sie dazu mit den Kommandos `docker images` und `docker ps`. Versuchen Sie bei diesen Kommandos die Option `--help` um etwas mehr über diese docker Kommandos zu erfahren.

.Aufgabe 2:
Versuchen Sie Querverbindungen zwischen den Informationen, die von `docker images -a` sowie `docker history ubuntu` ausgegeben werden, festzustellen.

.Aufgabe 3:
Nach Terminierung eines Containers bleibt dieser im System verfügbar
Versuchen Sie herauszufinden wie dieser entfernt werden kann. Wie müssen Sie das Kommando zum Erzeugen/Start des Containers modifizieren sodass der Container nach Terminierung aus dem System entfernt wird.

== Images und Container

=== Image aus einem Container erstellen

Ziel dieser Übung ist es, mittels `docker commit` Änderungen die in einem laufenden Container durchgeführt wurden permanent in einem neuen Image zu persistieren.

.Aufgabe 1:
Starten Sie einen Container und verändern Sie das Filesystem. Danach erstellen Sie aus dem Container ein neues Image mit welchem Sie wiederum einen neuen Container starten. Sind die Änderungen im Filesystem noch sichtbar?

.Aufgabe 2:
Versuchen Sie auch das neu erstellte Image (Image Repository) mit einem Tag auszustatten. Das können Sie nachträglich oder direkt bei der Erzeugung des neuen Image durchführen.

=== Oracle Java 8 Container

Ziel dieser Übung ist es, mittels `docker build ...`, ein Docker Image mit Oracle Java 8 zu erstellen. Dieses Image wird die Grundlage bilden für weitere Container die eine JVM benötigen.

[source, shell]
.Ubuntu Oracle Java 8 Installations Script
----
apt-get update
apt-get -y install python-software-properties software-properties-common
echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | debconf-set-selections
add-apt-repository -y ppa:webupd8team/java
apt-get update
apt-get install -y oracle-java8-installer
apt-get install oracle-java8-set-default
rm -rf /var/lib/apt/lists/*
rm -rf /var/cache/oracle-jdk8-installer
----

.Aufgabe 1:
Erstellen Sie das Image unter Verwendung des gegebenen Provisioning Script. Testen Sie dieses Image und versuchen Sie damit einen Container zu starten und in diesem den Java Compiler und die Java VM zu starten. Sie können dazu unten vorgegebenen Quellcode verwenden.

[source,java]
.HelloWorld.java
----
class HelloWorld {
  public static void main(String[] args) {
    System.out.println ("Hello World");
  }
}
----

.Aufgabe 2:
Führen Sie das Kommando zum Bauen des Image mehrfach aus, beobachten Sie die Konsolenausgabe. Was hat sich verändert? Weiters versuchen Sie herauszufinden, wieviele Layer erstellt wurden.

.Aufgabe 3:
Abschliessend modifizieren Sie die Build Instruktionen sodass möglichst wenige Layer produziert werden.

TIP: Dieses Image benötigen wir für spätere Übungen.

=== Java Web Application Container

Ziel dieser dieser Übung ist es, mittels `docker build`, einen Docker Container zu erstellen. Dieser Container soll die Java Web Anwendung Starbucks Storefinder in einer Oracle Java 8 JVM ausführen.

TIP: Wir verwenden nun das in der vorigen Aufgabe erstellte Image mit Oracle Java 8.

.Aufgabe 1

 . Image für die Web Anwendung erstellen
 . Image für Mongo DB lokal laden (`docker pull`)
 . Container für eine MongoDB starten
 . Container für die Web Anwendung starten und mit dem Mongo Container verlinken
 . Prüfen ob die Web Anwendung an der URL http://<docker-host>:8080 erreichbar ist.

TIP: Docker Hub stellt ein fertiges Mongo DB Image (`mongo:3.0`) zur Verfügung.

.Aufgabe 2

Experimentieren Sie mit den passenden `docker` Kommandooptionen um einen Mongo Container zu starten der `EXPOSED` Ports

* explizit einem definierten Port zuordnet,
* automatisch Ports zuordnet.

Mit diesen Erkenntnissen rekonfigurieren wir den zuvor erstellten Web Anwendungs Container. Es wurde  bereits angeführt dass Tomcat seine HTTP Dienste per Port 8080 zur Verfügung stellt. Für den Endanwender soll nun die Anwendung am Port 80 erreichbar sein.

.Aufgabe 3

Wir versuchen mit Hilfe des Kommandos `docker inspect` die Konfiguration des Containers abzufragen. Weiters versuchen wir das Kommando so zu ändern dass wir nur die Netzwerkkonfiguration bzw. nur die IP Adresse des Containers erhalten.

==== Starbucks Storefinder Web Anwendung

Die Applikation wird mittels der URL   https://snap-ci.com/buildartifacts/blue/40055/defaultPipeline/4/Commit/1/rest/starbucks/target/spring-data-rest-starbucks-1.0.0.BUILD-SNAPSHOT.jar?archived=true[Snap-CI] zum Download zur Verfügung gestellt.

Die Web Anwendung benötigt zur Persistierung Ihrer Daten eine Mongo Datenbank. Die Datenbankverbindungsparameter können als Systemproperties an die JVM der Anwendung übergeben werden.

[source,shell]
.Startkommando der Web Anwendung
----
java -jar -Dspring.data.mongodb.host=... -Dspring.data.mongodb.port=... spring-data-rest-starbucks.jar <1>
----
<1> Diese Startupparameter sind in der Spring Boot http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-mongodb[Referenz] beschrieben

In dem Anwendungs JAR File ist ein Tomcat Web Container verpackt der seine HTTP Dienste am Port 8080 zur Verfügung stellt.

TIP: Das Web Anwendungs Image benötigen wir für eine spätere Übung.

== Volumes

.Aufgabe 1: Mounten eines Data Volume

Mittels `docker run ...` oder `docker create ...` ein Data Volume mounten. Danach mit `docker inspect ...` die physische Location des Volume überprüfen.

.Aufgabe 2: Mounten eines Host Verzeichnis als Data Volume

Mittels `docker run ...` das Kommando `/bin/bash -c "touch /opt/database/touched.txt"` ausführen. Der Container soll ein Verzeichnis des Host mit dem Container Verzeichnis `/opt/database` mounten. Danach sollte im Host Verzeichnis die Datei `touched.txt`existieren.

.Aufgabe 3: Mounten der Volumes eines Data Container

Mit der ersten Aufgabe haben wir bereits einen Data Container erstellt. Dieser hat ein Volume definiert. Mit dieser Aufgabe erstellen wir diesen Container ein weiteres Mal sowie einen neuen Container der die Volumes des ersten Container mountet.

TIP: Dies ist das klassische Szenario das zum Einsatz bei Datenbankcontainern kommt. Wir haben einen Container der die Datenbanksoftware ausführt sowie einen Container der nur für die Datenhaltung verantwortlich ist.

=== Daten Container für einen Mongo Container erstellen

CAUTION: Work in progress

== Multi Container Applikationen

Die Erstellung sowie der Betrieb von Docker Containern für Anwendungen die aus vielen Subsystemen bestehen (Z.b. Web Server + Datenbankserver) ist aufwändig und komplex. Daher existiert mit *docker compose* ein Tool das erlaubt die Abhängigkeiten zwischen Containern so wie deren Ausführungskonfiguration zu beschreiben.

.Aufgabe 1

Erstellen sie eine docker-compose Beschreibungsdatei die für die bereits erstellen Images und Container der Starbucks Finder Web Applikation die `build` Schritte sowie die Konfiguration zur Ausführung der Container beschreibt.

Damit soll es möglich sein, den Mongo und den Web Container einfach durch Ausführung des Kommandos `docker-compose up` zu starten.

== Docker Host Provisioning

Currently students will not be able to perform docker-machine exercises within the Vmware image `mse-akt`. This limitation is due to the fact that it is hard to run a hypervisor within a hypervisor. In order to work with docker-machine we would have to setup VirtualBox witin the Vmware image. This VirtualBox would not be able to run as it will not be able to detect a proper `VT-X` flag which is required by a hypervisor.

Students could only be working with a non-local virtualization such as *Amazon AWS*, *DigitalOcean*, etc. However this would require each student to register with such a paid service (However Amazon AWS is free for the first year!).

CAUTION: Work in progress

== Anhang

=== Vmware Image mse-akt Provisioning

The provided vmware image comes with a `sudo` enabled user named `mse-akt`. All host provisioning tasks requiring `su` privileges must be performed using this user.

==== Student user

Every student is required to add their own user account in order to avoid multiple students working from the same workstation to interfere with each other.

[source,shell]
--
sudo adduser <your-student-id> <1>
sudo adduser <your-student-id> docker <2>
--

<1> Add user account
<2> Add user account to group `docker`

IMPORTANT: Every student is obliged to create this student owned user account!

==== Tools

[source, shell]
--
sudo apt-get install unzip
--

==== OpenSSH

We can install Open SSH in order to connect remotely using a SSH client such as `ssh` or `putty` (on Windows).

.Install OpenSSH Server
[source, shell]
--
sudo apt-get install openssh-server
--

.Install OpenSSH Client
Is only required if an Open SSH client is required!
[source, shell]
--
sudo apt-get install openssh-client
--

==== Docker Engine

Using the commands below we can provision a Docker host ourselves.

.Install Docker engine
[source, shell]
--
sudo apt-get update
sudo apt-get install curl
curl -sSL https://get.docker.com/ | sh
sudo usermod -aG docker mse-akt <1>
--
<1> Add the user mse-akt to the group `docker` which allows us to use the docker commands without sudo-ing.

Detailed instructions are available from https://docs.docker.com/installation/ubuntulinux/.

==== Docker Compose

Eine allgemeine https://docs.docker.com/compose/install/[Installationsanleitung] zu *docker-compose* finden Sie im Web.

[source,shell]
.docker-compose Installation
----
sudo -i <1>
curl -L https://github.com/docker/compose/releases/download/VERSION_NUM/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose <2>
chmod +x /usr/local/bin/docker-compose
exit
----
<1> Run the following commands as super user.
<2> Ersetzen Sie `VERSION_NUM` durch {docker-compose-version}. Entfernen Sie vor der Befehlsausführung den Hinweismarker (n).

Für eine verbesserte Shell Unterstützung können wir folgendes ausführen:

[source,shell]
.bash auto-complete support
----
sudo -i
curl -L https://raw.githubusercontent.com/docker/compose/$(docker-compose --version | awk 'NR==1{print $NF}')/contrib/completion/bash/docker-compose > /etc/bash_completion.d/docker-compose
exit
----

==== Docker Machine

See https://docs.docker.com/machine/install-machine/.

[source,shell]
.docker-machine 0.4.x installation for 64 bit Intel/AMD Linux
--
curl -L https://github.com/docker/machine/releases/download/v0.5.0/docker-machine_linux-amd64 > docker-machine
chmod +x docker-machine
sudo mv docker-machine /usr/local/bin/docker-machine
docker-machine -v
--

[source,shell]
.docker-machine 0.5.0 installation for 64 bit Intel/AMD Linux
--
curl -L https://github.com/docker/machine/releases/download/v0.5.0/docker-machine_linux-amd64.zip >machine.zip && \
  unzip machine.zip && \
  rm machine.zip
sudo mv -f docker-machine* /usr/local/bin
--

[source,shell]
.docker-machine 0.5.3 installation for 64 bit Intel/AMD Linux
--
sudo -i
curl -L https://github.com/docker/machine/releases/download/v0.5.3/docker-machine_linux-amd64 >/usr/local/bin/docker-machine
chmod +x /usr/local/bin/docker-machine
exit
--
