:source-highlighter: pygments
:ubuntu-version: 14.04 (trusty)
:docker-compose-version: 1.5.2

= Lab Exercise Instructions

All instructions for lab exercises are based on a 'native' Docker installation. This is provided through a Vmware Image `mse-akt`.

== Setup

=== Vmware Image mse-akt

A virtual machine `mse-akt` based on Ubuntu 14.04.x LTS is provided. All lab exercises can be peformed using thise machine. As of now we only have a pure server setup available (sorry no desktop, no GUI).

.Setup the provided image

. Import Vmware image
. Configure network (Bridged)
. Start Vmware image `mse-akt`.

.Connecting to the machine
Using a SSH client we can try to connect to the Ubuntu machine.

[source, shell]
--
ssh mse-akt@mse-akt <1>
--
<1> This command will ask to enter the password for the user `mse-akt`.

.Setup a student user account

Follow the instructions included in the appendix!

=== docker-machine

IMPORTANT: The docker-machine based setup is only documented for show-case purposes and not supported during lab sessions.

We can avoid working with an extra virtualization solution when a workstation based on native Linux (or Mac OSX) is available.
Using `docker-machine` we can quickly provision a docker host (this is a Linux Box with a pre-configured Docker daemon).

Docker supported for the following platforms: https://docs.docker.com/installation.
Preferrably we use Mac OSX or Ubuntu (e.g. 14.04.LTS).

.Create a Docker host
[source, shell]
--
docker-machine create --driver virtualbox mse-akt <1>
--
<1> This requires VirtualBox 4.x to be installed.

.Start a Docker host
[source, shell]
----
docker-machine start mse-akt
eval "$(docker-machine env mse-akt)"
----

=== Check the Docker Installation

With all lab exercies with Docker we are going to exclusively use Ubuntu {ubuntu-version}. I.e. all Docker containers start a Ubuntu {ubuntu-version}.
Following this setup a speedy exercise execution is guaranteed and we avoid slow and unnecessary repeated network downloads.

[source,shell]
.Check the Docker Installation:
----
docker run -i -t --rm ubuntu:14.04 /bin/bash
----

IMPORTANT: With a Linux host and a default Docker installation all commands have to be executed using `sudo` (super user privileges). For reasons of clarity this `sudo` command prefix is not shown in the examples that will follow shortly. Further `sudo` is not necessary when working e.g. on Mac OSX with boot2docker (or docker machine). Optionally Docker may be installed in a way that does not require super user privileges. For security reasons this is not a recommended operation mode for Docker. However to make the lab exercises clearer the provided Docker environment is configured in such a way and `sudo` is not required for any of the docker commands.

General help for the Docker commands is available from https://docs.docker.com/reference/commandline/cli/.

== Union File System

The goal of this exercise is to overlay multiple directories using AUFS such that the content of those directories is visible from a directory mounted from AUFS.

First we are installing the file system support for AUFS. This file system is only required for the next lab exercise.

[source, shell]
----
sudo apt-get install aufs-tools
----

NOTE: `aufs-tools` may already be installed as a Docker dependency.

Next we create 3 directories we will use shortly:

* $HOME/aufs/sub1
* $HOME/aufs/sub2
* $HOME/aufs/root

Create a file in each of the created directories (E.g. `touch file.txt`). Finally use the installed *AUFS* file system to mount the directories `sub1` and `sub2` as subdirectories of `root`.

NOTE: File systems are mounted using the system command 'mnt'.

== Meet Docker

Goal of this lab exercise is to start a Docker container running a `bash` shell and to examine what Docker components have been created and how these relate to each other.

.Task 1:
Your first task is creating a container using the command `docker run` (find the proper arguments using the built-in help). Once started this container must run a shell (`/bin/bash`) allowing you to execute bash commands interactively.

Terminate the container and examine which components have been created along with the first task. Use the commands `docker images` and `docker ps` for performing your experiments. Also try the `--help` options of those commands to explore Docker further.

.Task 2:
Try to figure out crosslinks across the information items spit out by the commands `docker images -a` as well as `docker history ubuntu`

.Task 3:
After terminating a container it remains available in the system. Find a command to remove it manually. Then try to figure out how we can modify a container creation/execution command such that it is removed automatically after its termination.

.Task 4:
The command `docker search` allows us to search for images using a search term. Try to explore the docker eco-system by issuing search requests for the terms `apache`, `LAMP`, `mongo`, `postgres`.

NOTE: By default the search command will search through the *docker hub*.

== Images and Containers

=== Create an Image from a Container

The goal of this lab exercise is to create a new image from an executing container using the `docker commit` command.

.Task 1:
Start a new container (e.g. run a bash shell interactively) and modify this container's file system. Then create a new image from this container. Finally use this image to start another container. Watch for the file system modifications that were applied within the first container. Are they still visible?

.Task 2:
Now apply a tag to the image that was created earlier. This can be done for the image that was already created or just when creating the image. Try both approaches.

=== Oracle Java 8 Container

Goal of this lab exercise is to create a Docker image that contains an Oracle Java 8 installation. Use the command `docker build ...` (with proper arguments). We will be using this image as a base for later exercises that require a JVM.

[source, shell]
.Ubuntu Oracle Java 8 Installation Script
----
apt-get update
apt-get -y install python-software-properties software-properties-common
echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | debconf-set-selections
add-apt-repository -y ppa:webupd8team/java
apt-get update
apt-get install -y oracle-java8-installer
apt-get install oracle-java8-set-default
rm -rf /var/lib/apt/lists/*
rm -rf /var/cache/oracle-jdk8-installer
----

.Task 1:
Create the image using the provisioning script given before. Test that image by starting a container from this image. Once the container is running try compiling and running a simple Java class within this container.

[source,java]
.HelloWorld.java
----
class HelloWorld {
  public static void main(String[] args) {
    System.out.println ("Hello World");
  }
}
----

.Task 2:
Run the `docker build ...` command once more and watch the console output. What has changed? Try to figure out how many layers have been produced for the image.

.Task 3:
The last step of this exercise is to optimize the build instructions such that we have a minimum of layers.

TIP: We will use this image from this exercise for later exercises So make sure you finish it and it works properly.

=== Java Web Application Container

Goal of this exercise is to create a Docker container using the `docker build ...` command. This container is configured to run a provided Java web application. This is the *Starbucks storefinder* application which requires a Oracle Java 8 JVM.

TIP: We are finally using the previously created Oracle Java 8 image.

.Task 1

 . Produce the image containing the web application
 . Load the image for Mongo DB locally (`docker pull`)
 . Start a container for the MongoDB
 . Start the web application container and link it to the Mongo container
 . Check if the web application is available at the URL http://<docker-host>:8080

TIP: The Docker Hub provides a ready to run Mongo DB image (`mongo:3.0`).

.Task 2
Play with the appropriate `docker` command options to start a Mongo container and to assign `EXPOSED` ports

* explicitly to a given port
* automatically.

Based on this new experiences we reconfigure the previously created web application container. By default Tomcat is offering its HTTP service through port 8080. We modify the build instructions for the image such that the Tomcat HTTP port is exposed and modify the container start command to assign port 80.

.Task 3

Using the command `docker inspect` we try to query all of the configuration details of the web application container.
Further we modify the command such that we can select specific configuration items by their name (e.g. we only receive the network configuration or just the IP adress).

==== Starbucks Storefinder Web Application

This section briefly describes the web application we are working with.

The executable web application archive is available for download from the URL   https://snap-ci.com/buildartifacts/blue/40055/defaultPipeline/4/Commit/1/rest/starbucks/target/spring-data-rest-starbucks-1.0.0.BUILD-SNAPSHOT.jar?archived=true[Snap-CI].

The archive is packaged as a Spring Boot application. It requires a Mongo DB for persisting its application data.
Its database connection arguments can be passed as system properties to the JVM when starting.

[source,shell]
.Start command for the web application
----
java -jar -Dspring.data.mongodb.host=... -Dspring.data.mongodb.port=... spring-data-rest-starbucks.jar <1>
----
<1> These startup arguments are documented by the Spring Boot http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-mongodb[Reference].

The application archive contains an embedded Tomcat web container which exposes its HTTP services at port 8080.

== Volumes

For the following tasks we just need a simple Ubuntu image which we use for executing a bash shell and play with data volumes.

.Task 1: Mounting a data volume

Using `docker run ...` or `docker create ...` we mount a data volume. Following we check the location of the volume on the Docker host using `docker inspect ...`.

NOTE: The Docker host is the machine which is running the Docker daemon!

.Task 2: Mounting a host directory as data volume

Using `docker run ...` we execute the command `/bin/bash -c "touch /opt/database/touched.txt"`. Find the proper arguments to the `run` command in order to mount a host directory to the container directory `/opt/database`. As the command exits we expect the file `touched.txt` in the mounted host directory.

.Task 3: Mounting volumes from a data container

Along task 1 we have already built a data container. This container includes a data volume. With this new task we recreate this container and then add another container that mounts all volumes from the first container.

TIP: This is a typical scenario when working with containers that need a persistent storage (such as databases). We have a container that executes some data management software plus a container that is just responsible for maintaining persistent data (separation of concerns).

=== Build a data container for a MongoDB container

CAUTION: Work in progress

== Multi Container Applications

Building and running Docker containers for applications based on multiple subsystems ( e.g. web server + database server) is quite complex and time consuming. For this reason a tool named *docker compose* allows to describe dependencies between containers and their execution configuration.

.Task 1

Create a docker compose container descriptor that builds the images and containers for the Starbucks Storefinder web application.

As a result we will be able to run the MongoDB and the web application container just by issuing the command  `docker-compose up`.

== Docker Host Provisioning

Currently students will not be able to perform docker-machine exercises within the Vmware image `mse-akt`. This limitation is due to the fact that it is hard to run a hypervisor within a hypervisor. In order to work with docker-machine we would have to setup VirtualBox within the Vmware image. This VirtualBox would not be able to run as it will not be able to detect a proper `VT-X` flag which is required by a hypervisor.

Students could only be working with a non-local virtualization such as *Amazon AWS*, *DigitalOcean*, etc. However this would require each student to register with such a paid service (However Amazon AWS is free for the first year!).

CAUTION: Work in progress

== Appendix

=== Vmware Image mse-akt Provisioning

The provided Vmware image comes with a `sudo` enabled user named `mse-akt`. All host provisioning tasks requiring `su` privileges must be performed using this user.

==== Student user

Every student is required to add their own user account in order to avoid multiple students working from the same workstation to interfere with each other.

[source,shell]
--
sudo adduser <your-student-id> <1>
sudo adduser <your-student-id> docker <2>
--

<1> Add user account
<2> Add user account to group `docker`

IMPORTANT: Every student is obliged to create this student owned user account!

==== Tools

[source, shell]
--
sudo apt-get install unzip
--

==== OpenSSH

We can install Open SSH in order to connect remotely using a SSH client such as `ssh` or `putty` (on Windows).

.Install OpenSSH Server
[source, shell]
--
sudo apt-get install openssh-server
--

.Install OpenSSH Client
Is only required if an Open SSH client is required!
[source, shell]
--
sudo apt-get install openssh-client
--

==== Docker Engine

Using the commands below we can provision a Docker host ourselves.

.Install Docker engine
[source, shell]
--
sudo apt-get update
sudo apt-get install curl
curl -sSL https://get.docker.com/ | sh
sudo usermod -aG docker mse-akt <1>
--
<1> Add the user mse-akt to the group `docker` which allows us to use the docker commands without sudo-ing.

Detailed instructions are available from https://docs.docker.com/installation/ubuntulinux/.

==== Docker Compose

A common https://docs.docker.com/compose/install/[installation reference] for *docker-compose* is available from Docker Inc.

[source,shell]
.docker-compose installation
----
sudo -i <1>
curl -L https://github.com/docker/compose/releases/download/VERSION_NUM/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose <2>
chmod +x /usr/local/bin/docker-compose
exit
----
<1> Run the following commands as super user.
<2> Replace `VERSION_NUM` by {docker-compose-version}.

For an improved shell experience we can install some shell support:

[source,shell]
.bash auto-complete support
----
sudo -i
curl -L https://raw.githubusercontent.com/docker/compose/$(docker-compose --version | awk 'NR==1{print $NF}')/contrib/completion/bash/docker-compose > /etc/bash_completion.d/docker-compose
exit
----

==== Docker Machine

See https://docs.docker.com/machine/install-machine/.

[source,shell]
.docker-machine 0.4.x installation for 64 bit Intel/AMD Linux
--
curl -L https://github.com/docker/machine/releases/download/v0.5.0/docker-machine_linux-amd64 > docker-machine
chmod +x docker-machine
sudo mv docker-machine /usr/local/bin/docker-machine
docker-machine -v
--

[source,shell]
.docker-machine 0.5.0 installation for 64 bit Intel/AMD Linux
--
curl -L https://github.com/docker/machine/releases/download/v0.5.0/docker-machine_linux-amd64.zip >machine.zip && \
  unzip machine.zip && \
  rm machine.zip
sudo mv -f docker-machine* /usr/local/bin
--

[source,shell]
.docker-machine 0.5.3 installation for 64 bit Intel/AMD Linux
--
sudo -i
curl -L https://github.com/docker/machine/releases/download/v0.5.3/docker-machine_linux-amd64 >/usr/local/bin/docker-machine
chmod +x /usr/local/bin/docker-machine
exit
--
